hello world
Cryptography represents an important part 
of the information exchange nowadays
providing secure communications and data integrity.
There are many existing encryption algorithms
that could provide the confidentiality and integrity
data during transmission over different channels
One of the most used cryptographic algorithms is AES
Advanced Encryption Standard
It was developed in 2001 by Vincent Rijmen
and Joan Daemon, as a replacement for DES.
that became outdated and insecure
as technology advanced, mostly because
of its short key length. The AES algorithm 
is widely used in wireless security, file
encryption, SSL/TLS etc.
AES, also known by its original 
name Rijndael, is a symmetric key algorithm,
or secret-key algorithm, meaning that both
 the encryption and the decryption are
performed with the same key. 
AES 
is also a block cipher,
that uses 128-bit, 192-bit or 256-bit key
 to process 128-bit data blocks. 
 AES comes with a key expansion
algorithm, so that each encryption step
is performed using different sub-keys.
The following figure illustrates the 
process of a 128-bit AES encryption.
 The data
block and the key are represented
as 4x4 matrix,
 where each element has 1 byte. 
 Of
course, 
for key lengths of 192-bit
 or 256-bit the matrix dimension would 
 be 4x6 or 4x8. 
 The output of each step 
 represents an input for the following step.
 The initial key passes
 through a series of
 transformations, in 10 different rounds
 (for AES 128). 
 For AES 192 and AES 256 there
 are 8, respectively 7 rounds.
 The subkey
obtained in every round 
is used in the Add round key 
step from the encryption.
Parallel implementations come with 
a great advantage compared to the conventional
ones: high speedup.
 This is also the case for cryptographic 
 algorithms, that
can provide the same efficiency
 in terms of security, but a lot faster.
 In order to compare further 
 the performance of the
 AES implementation on the
custom accelerator, I compiled
 a list of papers in which different
 methods of parallelization,
 on different platforms, 
 are used in order to achieve 
 a great speedup for
AES encryption.
This paper
 presents a high-throughput
 bitsliced implementation of AES,
 using a
technique that redesigns all the
 stages of the algorithm. They 
 perform some optimizations
like input rearrangement for Shift
 Rows phase, replacing byte-wise operations
with registers shifts or changing
the S-box logic circuit in order to process up
to 32 blocks of 128-bit input data at
 the same time. The hardware platforms are 6
different CUDA-enabled GPUs.
The implementation eliminates the
 computationally intensive 
 operations in all
the stages and enables each 
CUDA thread to process 32 chunks of 128-bit input data
simultaneously. Also, the 
data representation is changed
 from row-major to columnmajor
in order to increase the performance.
The row-major means that each
 128-bit chunk of data is
 stored in four 32-bit registers.
In the new column-major representation,
 to store 32 blocks of input data,
128x32-bit registers are needed.
 The difference is that
 instead of holding first bits of
data in the first register,
 it stores the least significant 
 bits from all the 32 chunks of
128-bit data. To summarize,
 each register stores bits that
 have an identical position
from all the 32 data 
blocks in the new column-major 
approach. In this manner, each
CUDA thread processes 32 
chunks of 128-bit data.
An example is in figure 2.1,
 where R states for registers
 and D states for blocks of
data.
Substitute bytes
Normally, the S-box
 lookup table takes as input
 8 bits at a time, so a data block is
read from 8 registers from 
the total of 128 registers for 16 times.
 Substitute bytes
stage is modified such that
 instead of this approach, the 
 registers where each block
is stored (R0, R1, R2, . . . .R127)
 are passed into the S-box logic
 circuit 8 registers at a
time and in this way, 32 chunks